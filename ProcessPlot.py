from matplotlib import pyplot as plt, dates as mdates
import numpy as np
from pandas import *
from PyPDF2 import PdfMerger, PdfReader
from datetime import datetime as dt

# List of input CSV files generated by CHO run
crs_csv_path = "C:\\Users\\Administrator\\Desktop\\Simple_programs\\csv_files\\crs.csv"
omniinet_csv_path = "C:\\Users\\Administrator\\Desktop\\Simple_programs\\csv_files\\omniinet.csv"
java_csv_path = "C:\\Users\\Administrator\\Desktop\\Simple_programs\\csv_files\\java.csv"
kms_csv_path = "C:\\Users\\Administrator\\Desktop\\Simple_programs\\csv_files\\kms.csv"
mmd_csv_path = "C:\\Users\\Administrator\\Desktop\\Simple_programs\\csv_files\\mmd.csv"

# List of output graph in pdf format files for DP Processes
crs_mem_consumption_graph = "C:\\Users\\Administrator\\Desktop\\Simple_programs\\plots\\crs_mem_consum.pdf"
omniinet_mem_consumption_graph = "C:\\Users\\Administrator\\Desktop\\Simple_programs\\plots\\omniinet_mem_consum.pdf"
java_mem_consumption_graph = "C:\\Users\\Administrator\\Desktop\\Simple_programs\\plots\\java_mem_consum.pdf"
kms_mem_consumption_graph = "C:\\Users\\Administrator\\Desktop\\Simple_programs\\plots\\kms_mem_consum.pdf"
mmd_mem_consumption_graph = "C:\\Users\\Administrator\\Desktop\\Simple_programs\\plots\\mmd_mem_consum.pdf"

# Prepare the list with all graphs which we need later for merging all pdf files into one
mem_consumption_all_graphs_list = [crs_mem_consumption_graph, omniinet_mem_consumption_graph, java_mem_consumption_graph, kms_mem_consumption_graph, mmd_mem_consumption_graph]

# Generate graph for process - CRS
crs = read_csv(crs_csv_path)
date_list = crs['DateTime'].tolist()
mem_list = crs['Memory MB'].tolist()

print("Dates are : ", date_list)
print("Memory used:", mem_list)

x = date_list
y = mem_list

plt.rcParams["figure.figsize"] = [7.00, 3.50]
plt.rcParams["figure.autolayout"] = True
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d %H:%M'))
plt.plot(x, y)
ax.set_xticks(x)
ax.set_xticklabels(x, rotation=25)
plt.xlabel('Date & Time')
plt.ylabel('Memory - MBs')
plt.title('CRS')
plt.legend()
plt.margins(0.03)
plt.grid(color='green', linestyle='--', linewidth= 0.1)
fig.set_size_inches(25, 5, forward=True)
plt.savefig(crs_mem_consumption_graph, dpi=100)
plt.close()

# Generate graph for process - Omniinet
omniinet = read_csv(omniinet_csv_path)
date_list = omniinet['DateTime'].tolist()
mem_list = omniinet['Memory MB'].tolist()

print("Dates are : ", date_list)
print("Memory used:", mem_list)

x = date_list
y = mem_list

plt.rcParams["figure.figsize"] = [7.00, 3.50]
plt.rcParams["figure.autolayout"] = True
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d %H:%M'))
plt.plot(x, y)
ax.set_xticks(x)
ax.set_xticklabels(x, rotation=25)
plt.xlabel('Date & Time')
plt.ylabel('Memory - MBs')
plt.title('OMNIINET')
plt.legend()
plt.margins(0.03)
plt.grid(color='green', linestyle='--', linewidth= 0.1)
fig.set_size_inches(25, 5, forward=True)
plt.savefig(omniinet_mem_consumption_graph, dpi=100)
plt.close()

# Generate graph for process - Java
java = read_csv(java_csv_path)
date_list = java['DateTime'].tolist()
mem_list = java['Memory MB'].tolist()

print("Dates are : ", date_list)
print("Memory used:", mem_list)

x = date_list
y = mem_list

plt.rcParams["figure.figsize"] = [7.00, 3.50]
plt.rcParams["figure.autolayout"] = True
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d %H:%M'))
plt.plot(x, y)
ax.set_xticks(x)
ax.set_xticklabels(x, rotation=25)
plt.xlabel('Date & Time')
plt.ylabel('Memory - MBs')
plt.title('JAVA')
plt.legend()
plt.margins(0.03)
plt.grid(color='green', linestyle='--', linewidth= 0.1)
fig.set_size_inches(25, 5, forward=True)
plt.savefig(java_mem_consumption_graph, dpi=100)
plt.close()

# Generate graph for process - KMS
kms = read_csv(kms_csv_path)
date_list = kms['DateTime'].tolist()
mem_list = kms['Memory MB'].tolist()

print("Dates are : ", date_list)
print("Memory used:", mem_list)

x = date_list
y = mem_list

plt.rcParams["figure.figsize"] = [7.00, 3.50]
plt.rcParams["figure.autolayout"] = True
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d %H:%M'))
plt.plot(x, y)
ax.set_xticks(x)
ax.set_xticklabels(x, rotation=25)
plt.xlabel('Date & Time')
plt.ylabel('Memory - MBs')
plt.title('KMS')
plt.legend()
plt.margins(0.03)
plt.grid(color='green', linestyle='--', linewidth= 0.1)
fig.set_size_inches(25, 5, forward=True)
plt.savefig(kms_mem_consumption_graph, dpi=100)
plt.close()

# Generate graph for process - MMD
mmd = read_csv(mmd_csv_path)
date_list = mmd['DateTime'].tolist()
mem_list = mmd['Memory MB'].tolist()

print("Dates are : ", date_list)
print("Memory used:", mem_list)

x = date_list
y = mem_list

plt.rcParams["figure.figsize"] = [7.00, 3.50]
plt.rcParams["figure.autolayout"] = True
fig, ax = plt.subplots()
ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d %H:%M'))
plt.plot(x, y)
ax.set_xticks(x)
ax.set_xticklabels(x, rotation=25)
plt.xlabel('Date & Time')
plt.ylabel('Memory - MBs')
plt.title('MMD')
plt.legend()
plt.margins(0.03)
plt.grid(color='green', linestyle='--', linewidth= 0.1)
fig.set_size_inches(25, 5, forward=True)
plt.savefig(mmd_mem_consumption_graph, dpi=100)
plt.close()

# Merge all pdf files into one to represent all graphs in a single pdf file for user easeness
# Call the PdfFileMerger
mergedObject = PdfMerger()

# I had 116 files in the folder that had to be merged into a single document
# Loop through all of them and append their pages
for filename in mem_consumption_all_graphs_list:
    mergedObject.append(PdfReader(filename, 'rb'))

# Write all the files into a file which is named as shown below
mergedObject.write("DP_Processes_Mem_consumption.pdf")

